@model PresenceTabMalik.Models.StatisticsViewModel
@{
    ViewData["Title"] = "Статистика";
    Layout = "_LayoutOneColumn";
}

<h3>Статистика</h3>

<form method="get" class="statistics-filters">
    <div class="employee-stats-search">
        <span>Співробітник:</span>
        <div class="search-container">
            <div class="search-input-wrapper">
                <input type="text"
                       id="employeeStatsSearch"
                       placeholder="Введіть ПІБ співробітника"
                       autocomplete="off"
                       value="@ViewBag.SelectedEmployeeName" />
                <button type="button" id="clearStatsSearch" class="clear-search">
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <line x1="18" y1="6" x2="6" y2="18"></line>
                        <line x1="6" y1="6" x2="18" y2="18"></line>
                    </svg>
                </button>
            </div>
            <div id="statsSearchResults" class="stats-search-results"></div>
        </div>
    </div>

    <div class="filter-item">
        <label>З:</label>
        <input type="date" name="startDate" value="@Model.StartDate.ToString("yyyy-MM-dd")" />
    </div>
    <div class="filter-item">
        <label>До:</label>
        <input type="date" name="endDate" value="@Model.EndDate.ToString("yyyy-MM-dd")" />
    </div>
    <button type="submit" class="filter-button">Застосувати</button>
</form>

<div class="divider"></div>

<div class="last-update">
    <span>Дані станом на @Model.LastUpdateTime.ToString("dd.MM.yyyy HH:mm")</span>
    <button onclick="location.reload()" class="refresh-button">
        <img src="~/images/refresh.svg" alt="Оновити" />
    </button>
</div>

<div class="divider"></div>

<div class="status-info">
    <span>Робочий: <span class="value-working">@(Model.StatusCounts.GetValueOrDefault("Робочий", 0))</span></span>
    <span>Вихідний: <span class="value-weekend">@(Model.StatusCounts.GetValueOrDefault("Вихідний", 0))</span></span>
    <span>Відпустка: <span class="value-vacation">@(Model.StatusCounts.GetValueOrDefault("Відпустка", 0))</span></span>
    <span>Відсутній: <span class="value-absent">@(Model.StatusCounts.GetValueOrDefault("Відсутній", 0))</span></span>
    <span>Лікарняне: <span class="value-sick">@(Model.StatusCounts.GetValueOrDefault("Лікарняне", 0))</span></span>
</div>

<div class="charts-container">
    <div class="presence-section">
        <h4>Присутність</h4>
        <div class="chart-container">
            <canvas id="presenceChart"></canvas>
        </div>
        <div class="presence-legend">
            <div class="legend-item working">Робочий: @Model.StatusCounts.GetValueOrDefault("Робочий", 0)</div>
            <div class="legend-item vacation">Відпустка: @Model.StatusCounts.GetValueOrDefault("Відпустка", 0)</div>
            <div class="legend-item sick">Лікарняне: @Model.StatusCounts.GetValueOrDefault("Лікарняне", 0)</div>
            <div class="legend-item absent">Відсутній: @Model.StatusCounts.GetValueOrDefault("Відсутній", 0)</div>
        </div>
    </div>
    <div class="salary-section">
        <h4>Заробітна плата</h4>
        <div class="salary-info">
            <span>Відпрацьовано за період:</span>
            <span class="salary-amount">@Model.PeriodSalary.ToString("N0") грн</span>
        </div>
        <div class="salary-chart">
            <canvas id="salaryChart"></canvas>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const searchInput = document.getElementById('employeeStatsSearch');
            const clearButton = document.getElementById('clearStatsSearch');
            const resultsContainer = document.getElementById('statsSearchResults');
            let debounceTimer;

            searchInput.addEventListener('input', function () {
                clearTimeout(debounceTimer);
                clearButton.style.display = this.value ? 'flex' : 'none';

                debounceTimer = setTimeout(() => {
                    if (this.value.length > 0) {
                        fetch(`/Manager/SearchEmployees?term=${encodeURIComponent(this.value)}`)
                            .then(response => response.json())
                            .then(data => {
                                resultsContainer.innerHTML = '';
                                if (data.length > 0) {
                                    data.slice(0, 5).forEach(employee => {
                                        const item = document.createElement('div');
                                        item.className = 'stats-result-item';
                                        item.innerText = employee.fullName;
                                        item.onclick = () => {
                                            const startDate = document.querySelector('input[name="startDate"]').value;
                                            const endDate = document.querySelector('input[name="endDate"]').value;
                                            window.location.href = `/Manager/Statistics?employeeId=${employee.id}&startDate=${startDate}&endDate=${endDate}`;
                                        };
                                        resultsContainer.appendChild(item);
                                    });
                                    resultsContainer.classList.add('active');
                                }
                            });
                    } else {
                        resultsContainer.classList.remove('active');
                    }
                }, 300);
            });

            clearButton.addEventListener('click', function () {
                searchInput.value = '';
                resultsContainer.classList.remove('active');
                this.style.display = 'none';
                const startDate = document.querySelector('input[name="startDate"]').value;
                const endDate = document.querySelector('input[name="endDate"]').value;
                window.location.href = `/Manager/Statistics?startDate=${startDate}&endDate=${endDate}`;
            });

            document.addEventListener('click', function (e) {
                if (!searchInput.contains(e.target) && !resultsContainer.contains(e.target)) {
                    resultsContainer.classList.remove('active');
                }
            });
        });

        const presenceCtx = document.getElementById('presenceChart').getContext('2d');
        new Chart(presenceCtx, {
            type: 'doughnut',
            data: {
                labels: ['Робочий', 'Відпустка', 'Лікарняне', 'Відсутній'],
                datasets: [{
                    data: [
        @Model.StatusCounts.GetValueOrDefault("Робочий", 0),
        @Model.StatusCounts.GetValueOrDefault("Відпустка", 0),
        @Model.StatusCounts.GetValueOrDefault("Лікарняне", 0),
        @Model.StatusCounts.GetValueOrDefault("Відсутній", 0)
                                   ],
                    backgroundColor: [
                        '#90EE90',
                        '#87CEEB',
                        '#DDA0DD',
                        '#F0F0F0'
                    ],
                    borderWidth: 0
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                cutout: '75%',
                plugins: {
                    legend: {
                        display: false
                    }
                }
            },
            plugins: [{
                id: 'centerText',
                beforeDraw: function (chart) {
                    const ctx = chart.ctx;
                    const width = chart.width;
                    const height = chart.height;

                    ctx.restore();
                    const fontSize = (height / 100).toFixed(2);
                    ctx.font = `${fontSize}em Montserrat`;
                    ctx.textBaseline = "middle";
                    ctx.textAlign = "center";

                    const total = chart.data.datasets[0].data.reduce((a, b) => a + b, 0);
                    const workingCount = chart.data.datasets[0].data[0];
                    const percentage = total > 0 ? Math.round((workingCount / total) * 100) : 0;

                    const text = `${percentage}%`;
                    const x = width / 2;
                    const y = height / 2;

                    ctx.fillStyle = "#000";
                    ctx.fillText(text, x, y);
                    ctx.save();
                }
            }]
        });


        const salaryCtx = document.getElementById('salaryChart').getContext('2d');

        const monthLabels = @Html.Raw(Json.Serialize(Model.MonthlySalaries.Select(s => s.Month.ToString("MM.yyyy")).ToList()));
        const salaryData = @Html.Raw(Json.Serialize(Model.MonthlySalaries.Select(s => s.Salary).ToList()));

        new Chart(salaryCtx, {
            type: 'bar',
            data: {
                labels: monthLabels,
                datasets: [{
                    label: 'Оклад',
                    data: salaryData,
                    backgroundColor: '#90EE90',
                    borderWidth: 0,
                    borderRadius: 4
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                scales: {
                    y: {
                        beginAtZero: true,
                        grace: '5%',
                        grid: {
                            color: '#E5E5E5',
                            drawBorder: false
                        },
                        ticks: {
                            padding: 10,
                            color: '#595959'
                        }
                    },
                    x: {
                        grid: {
                            display: false,
                            drawBorder: false
                        },
                        ticks: {
                            color: '#595959',
                            callback: function (val, index) {
                                const monthYear = monthLabels[index].split('.');
                                return monthYear[0] + '.' + monthYear[1];
                            }
                        }
                    }
                },
                plugins: {
                    legend: {
                        display: false
                    },
                    tooltip: {
                        backgroundColor: 'rgba(0, 0, 0, 0.8)',
                        padding: 10,
                        titleColor: '#fff',
                        titleFont: {
                            size: 14,
                            weight: 'normal',
                            family: 'Montserrat'
                        },
                        displayColors: false,
                        callbacks: {
                            title: function (context) {
                                return monthLabels[context[0].dataIndex];
                            },
                            label: function (context) {
                                return `${context.raw.toLocaleString()} грн`;
                            }
                        }
                    }
                }
            }
        });
    </script>
}